ID,Pre-Text,Code,Post-Text,Blooms Taxonomy,Hints,Answer,Source
1,"What value is in the variable ""i"" after this code is executed?","x = [2, 1, 4, 5, 7]\nlimit = 3\ni = 0\nsum = 0\nwhile sum < limit and i < len(x):\n    i += 1\n    sum += x[i]",,C,"[""The while loop stops either when the sum of elements in x becomes bigger than the limit OR when the index i becomes bigger than the length of x. Pay particular attention to when the index i changes."", ""```x = a list of five numbers\nlimit = 3\ni = 0 # works as our index\nsum = 0 # adds values of x\nwhile sum is smaller than the limit AND i is smaller than the size of x:\n    add 1 to our index i\n    add the value of x in position i to sum```"", ""After the first loop, i = 1 and sum = 2.\nAfter the second loop, i = 2 and sum = 3.\nSum is now bigger than the limit, so the loop ends with i = 2.""]",^\s*2\s*$,Q1 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
2,"After the above while loop finishes, ""count"" contains what value?","x1 = [1, 2, 4, 7]\nx2 = [1, 2, 5, 7]\ni1 = len(x1) - 1\ni2 = len(x2) - 1\ncount = 0\nwhile ((i1 > 0) and (i2 > 0)):\n    if (x1[i1] == x2[i2]):\n        count += 1\n        i1 -= 1\n        i2 -= 1\n    elif (x1[i1] < x2[i2]):\n        i2 -= 1\n    else:\n        # x1[i1] > x2[i2]\n        i1 -= 1",,C,"[""count only increases when the values of x1[i1] and x2[i2] are equal. Whenever they are not, one of the indexes decreases. Whenever they are, both indexes decrease."", ""```x1 = a list of four sorted numbers\nx2 = a list of four sorted numbers (with three values being the same as x1)\ni1 = length of x1 - 1\ni2 = length of x2 - 1 \ncount = 0 # our counter of x1[i1] and x2[i2] matches\nwhile i1 and i2 are > 0:\n    if x1[i1] and x2[i2] match:\n        add one to the match counter count \n        decrease i1 by 1\n        decrease i2 by 1\n    else if x1[i1] is smaller than x2[i2]:\n        decrease i2 by 1\n    else \n        # if x1[i1] is greater than x2[i2]\n        decrease i1 by 1```"", ""After the first loop, i1 = 2, i2 = 2, and count = 1.\nAfter the second loop, i1 = 2, i2 = 1, and count = 1.\nAfter the third loop, i1 = 1, i2 = 1, and count = 1.\nAfter the third loop, i1 = 0, i2 = 0, and count = 2.\nGiven that i1 and i2 need to be > 0, the while loop stops with count = 2.""]",^\s*2\s*$,Q2 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
3,"After this code is executed, ""count"" contains:","x = [1, 2, 3, 3, 3]\nb = [True, True, True, True, True]\n\ni = 0\nwhile i < len(b):\n    b[i] = False\n    i += 1\n\ni = 0\nwhile i < len(x):\n    b[x[i]] = True\n    i += 1\n\ncount = 0\n\ni = 0\nwhile i < len(b):\n    if b[i] == True:\n        count += 1\n    i += 1",,C,"[""In the first loop, all values in b are turned to false. In the second loop, the values of x act as indexes of b and indicate which positions are turned to true."", ""```x = a list of indexes\nb = a list of booleans\n\ni = 0 # our list index\nwhile i is smaller than the length of b:\n    b at index i is False\n    increase index i by 1\n\ni = 0 # our list index\nwhile i is smaller than the length of x:\n    b at index x[i] is True\n    increase index i by 1\n\ncount = 0 # our True counter\n\ni = 0 # our list index\nwhile i is smaller than the length of b:\n    if b at index i is True:\n        add 1 to counter count\n    increase index i by 1```"", ""x only contains three unique indexes of b: 1, 2, and 3. Therefore, only 3 values of b will be true, which count will record. count = 3 at the end.""]",^\s*3\s*$,Q3 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
4,"After this code is executed, ""count"" contains:","x1 = [0, 1, 2, 3]\nx2 = [1, 2, 2, 3]\ni1 = 0\ni2 = 0\ncount = 0\nwhile ((i1 < len(x1)) and (i2 < len(x2))):\n    if (x1[i1] == x2[i2]):\n        count += 1\n        i2 += 1\n    elif (x1[i1] < x2[i2]):\n        i1 += 1\n    else:\n        # x1[i1] > x2[i2]\n        i2 += 1",,C,"[""Both indexes i1 and i2 start at 0. i2 increases by 1 when x1[i1] and x2[i2] match AND when x1[i1] is greater than x2[i2]. i1 increases by 1 when the x1[i1] is smaller than x2[i2]. Match counter 'count' increases only when x1[i1] and x2[i2] match."", ""x1 = a list of four numbers\nx2 = a list of four numbers (3 of them match the numbers in x1)\ni1 = 0 # an index for x1\ni2 = 0 # an index for x2\ncount = 0 # a match counter\nwhile i1 < the length of x1 and i2 < the length of x2:\n    if  x1[i1] and x2[i2] match:\n        add 1 to match counter count\n        increase index i2 by 1\n    else if x1[i1] is smaller than x2[i2]:\n        increase index i1 by 1\n    else:\n        # if x1[i1] is greater than x2[i2]\n        increase index i2 by 1"", ""After the first loop, i1 = 1, i2 = 0, and count = 0.\nAfter the second loop, i1 = 1, i2 = 1, and count = 1.\nAfter the third loop, i1 = 2, i2 = 1, and count = 1.\nAfter the fourth loop, i1 = 2, i2 = 2, and count = 2.\nAfter the fifth loop, i1 = 2, i2 = 3, and count = 3.\nAfter the sixth loop, i1 = 3, i2 = 3, and count = 3.\nAfter the seventh loop, i1 = 3, i2 = 4, and count = 4.\nAt that moment, i2 > the length of x2, so the while loop breaks and count =4.""]",^\s*4\s*$,Q4 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
5,"After this code is executed, list ""x"" contains the values:","x = [0, 1, 2, 3]\ntemp = 0\ni = 0\nj = len(x) - 1\n\nwhile (i < j):\n    temp = x[i]\n    x[i] = x[j]\n    x[j] = 2*temp\n    i += 1\n    j -= 1",,C,"[""In the while loop, values of x are iterated from left to right using i and from right to left using j. 'temp' temporary holds the value of x[i], which is later replaced by the value of x[j]. Then x[j] is replaced by twice the value of 'temp'."", ""x = a list of four integers\ntemp = 0 # our temporary integer\ni = 0 # our index from left to right\nj = len(x) - 1 # our index from right to left\n\nwhile i is smaller than j:\n    hold x[i] in temp\n    replace x[i] with x[j]\n    replace x[j] with twice the value of temp\n    increase index i by 1\n    decrease index j by 1"", ""In the first loop, x[0] = 3 and x[3] = 2 * 0. In the second loop, x[1] = 2 and x[2] = 2 * 1. As we go for a third loop, i = 2 and j = 1, so the condition of i < j is not met. Therefore, the loop ends with x = [3, 2, 2, 0].""]","^\s*\[\s*3\s*,\s*2\s*,\s*2\s*,\s*0\s*\]\s*$",Q5 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
6,N/A,N/A,N/A,C,"[""N/A"", ""N/A"", ""N/A""]",.*,Q6 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
7,"What value is in the variable ""i"" after this code is executed?","x = [2, 1, 4, 5, 7]\nlimit = 7\ni = 0\nsum = 0\n\nwhile sum < limit and i < len(x):\n    sum += x[i]\n    i += 1",,C,"[""The while loop ends when either sum is greater or equal than limit OR when we have iterated over all the indexes of x. If the former condition fails, then i gets added 1 to the last index used. If the latter fails, then i becomes the length of x."", ""x = a list of 5 integers\nlimit = 7 # an integer limit to the sum\ni = 0 # our index for x\nsum = 0 # aggregates values of x\n\nwhile sum is lesser than limit and i is lesser than the length of x:\n    add x[i] to sum\n    increase index i by 1"", ""In the first loop, sum = 2 and i = 1. In the second loop, sum = 3 and i = 2. In the third loop, sum = 7 and i = 3. At this point, the sum < limit loop condition fails. This means that i = 3 at the end of the script.""]",^\s*3\s*$,Q7 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
8,"If any two numbers in an array of integers, not necessarily consecutive numbers in the array, are out of order (i.e. the number that occurs first in the array is larger than the number that occurs second), then that is called an inversion. For example, consider an array ""x"" that contains the following six numbers:\n\n    4 5 6 2 1 3\n\nThere are 10 inversions in that array, as:\n\n    x[0] = 4    >    x[3] = 2\n    x[0] = 4    >    x[4] = 1\n    x[0] = 4    >    x[5] = 3\n    x[1] = 5    >    x[3] = 2\n    x[1] = 5    >    x[4] = 1\n    x[1] = 5    >    x[5] = 3\n    x[2] = 6    >    x[3] = 2\n    x[2] = 6    >    x[4] = 1\n    x[2] = 6    >    x[5] = 3\n    x[3] = 2    >    x[4] = 1\n\nThe skeleton code below is intended to count the number of inversions in an array ""x"":","If any two numbers in an array of integers, not necessarily consecutive numbers in the array, are out of order (i.e. the number that occurs first in the array is larger than the number that occurs second), then that is called an inversion. For example, consider an array ""x"" that contains the following six numbers:\n\n    4 5 6 2 1 3\n\nThere are 10 inversions in that array, as:\n\n    x[0] = 4    >    x[3] = 2\n    x[0] = 4    >    x[4] = 1\n    x[0] = 4    >    x[5] = 3\n    x[1] = 5    >    x[3] = 2\n    x[1] = 5    >    x[4] = 1\n    x[1] = 5    >    x[5] = 3\n    x[2] = 6    >    x[3] = 2\n    x[2] = 6    >    x[4] = 1\n    x[2] = 6    >    x[5] = 3\n    x[3] = 2    >    x[4] = 1","When the above code finishes, the variable ""inversion_count"" is intended to contain the number of inversions in array ""x"". Therefore, the ""xxx1xxx"", ""xxx2xxx"", and ""xxx3xxx"" in the above code should be replaced respectively by:",C,"[""When creating the inner <code>while</code> loop, consider what should be the starting point for j. Should j iterate over all indexes of x?"", ""inversion_count = 0 # number of inversions that have taken place\ni = 0 # our index of x\n\nwhile i is lesser than len(x) - 1:\n    we need to establish j at the start of every loop so that x[i] is compared against all following values of x in the array\n    while must iterate until the last index of x:\n        if x[i] is greater than x[j]:\n            add 1 to our inversion count\n        we need to increment j to avoid an infinite loop \n    increase index i by 1"", ""Given that we are comparing x[i] against all following values of x in the array, j does not need to iterate over values from 0 to i. Thus, j = i + 1. The remaining missing part of the code is the typical while loop construction. Therefore, the missing code is:\nj = i + 1\nj < len(x)\nj += 1""]",^\s*j\s*=\s*i\s*\+\s*1$\n^\s*j\s*<\s*len\s*\(\s*x\s*\)\s*$\n^\s*j\s*\+=\s*1\s*$,Q8 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
9,"The skeleton code below is intended to copy into a list of integers called ""list2"" any numbers in another integer list ""list1"" that are even numbers. For example, if ""list1"" contained the numbers:\n\n    list1: 4 5 6 2 1 3\n\nthen after the copying process, ""list2"" should contain in its first three places:\n\n    list2: 4 6 2\n\nThe following code assumes that ""list2"" is big enough to hold all the even numbers from ""list1"":","a1 = 0\nlist2 = []\n\nwhile xxx1xxx:\n    # if list1[a1] is even\n    if list1[a1] % 2 == 0:\n        # list1[a1] is even,\n        # so copy it\n        xxx2xxx\n    a1 += 1","The missing pieces of code ""xxx1xxx"" and ""xxx2xxx"" in the above code should be replaced respectively by:",C,"[""When iterating over the indexes of a list, it is important to remember that a list starts at index 0. The accepted answer will use < only."", ""a1 = 0 # our index for list1\nlist2 = [] # an empty list where we will store even numbers\n\nwhile a1 does not exceed the last index of list1:\n    # if list1[a1] is even\n    if list1[a1] % 2 == 0:\n        append the value of list1 at index a1 to list2\n    increase our index a1 by one"", ""Given that the last index of list1 is len(list1) - 1, the while loop needs to finish at that index. Thus, our while loop's condition is a1 < len(list1). In order to append an integer from list1 at index a1 to list2, we use list2.append(list1[a1]). Therefore, the final answer is:\na1 < len(list1)\nlist2.append(list1[a1])""]",^\s*a1\s*<\s*len\(\s*list1\s*\)\s*$\n^\s*list2\s*.\s*append\(\s*list1\[\s*a1\s*\]\s*\)\s*$,Q9 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
10,"After this code is executed, the array “array2” contains what values?","list1 = [2, 4, 1, 3]\nlist2 = [0, 0, 0, 0]\na1 = 1\na2 = 0\n\nwhile (a1 < len(list1)):\n    if (list1[a1] >= 2):\n        list2[a2] = list1[a1]\n        a2 += 1\n    a1 += 1",,C,"[""Keep in mind that list2 already has starting values and that appropriate values of list1 will be placed in list2 according to index a2."", ""list1 = a list of 4 integers\nlist2 = a list of 4 zeros\na1 = 1 # our starting index for list 1\na2 = 0 # our starting index for list 2\n\nwhile a1 is lesser than the length of list1:\n    if list1[a1] is greater or equal to 2:\n        make value of list2 at index a2 equal the value of list 1 at index a1\n        increase index a2 by 1\n    increase index a1 by 2"", ""Index a1 starts at 1, so the first value of list1 is ignored. After the first loop, a1=2, a2=1, and list2=[4, 0, 0, 0]. After the second loop, a1=3, a2=1, and list2=[4, 0, 0, 0]. After the third loop, \na1=4,a2=2, and list2=[4, 3, 0, 0]. At this point, a1 equals the length of list1, so the while loop ends. Therefore, the final answer is [4, 3, 0, 0].""]","^\s*\[\s*4\s*,\s*3\s*,\s*0\s*,\s*0\s*\]\s*$",Q10 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
11,"Suppose a list of integers ""s"" contains zero or more different positive integers, in ascending order, followed by a zero. For example:\n\n    s = [2, 4, 5, 8, 0]\n            or\n    s = [0]\n\nConsider the following ""skeleton"" code, where the sequences of ""xxx1xxx"" and ""xxx2xxx"" are substitutes for the correct Python code:",    pos = 0\n    while ( (xxx1xxx) and (xxx2xxx) ):\n        pos += 1,"Suppose an integer variable ""e"" contains a positive integer. The purpose of the above code is to find the place in ""s"" occupied by the value stored in ""e"". Formally, when the above ""while"" loop terminates, the variable ""pos"" is determined as follows:\n\n1. If the value stored in ""e"" is also stored in the list, then ""pos"" contains the index of that position. For example, if e=6 and s = [2, 4, 6, 8, 0], then pos should equal 2.\n\n2. If the value stored in “e” is NOT stored in the array, but the value in “e” is less than some of the values in the array then “pos” contains the index of the lowest position in the array where the value is larger than in ""e"". For example, if e=7 and s = [2, 4, 6, 8, 0], then pos should equal 3.\n\n3. If the value stored in ""e"" is larger than any value in “s”, then ""pos"" contains the index of the position containing the zero. For example, if e=9 and s = [2, 4, 6, 8, 0], then pos should equal 4.\n\nThe missing pieces of code ""xxx1xxx"" and ""xxx2xxx"" in the above ""skeleton"" code should be replaced respectively by (do not use the function len() ):",C,"[""There are two conditions for the while loop: the first condition checks the relationship between the value of s at pos and e so that 1. and 2. are not met; the second condition checks for the end of the list without using len()."", ""    pos = 0 # our index of s\n    while 1. and 2. are not met and it is not the end of s:\n        increase the index by 1"", ""1. and 2. are not met while s[pos] < e. Meanwhile, the end of the list is indicated by the value 0 in the list. Thus, we have not reached the end while s[pos] != 0. Therefore, the answer would be:\ns[pos] < e\ns[pos] != 0""]",(^\s*s\s*\[\s*pos\s*\]\s*<\s*e\s*$\n^\s*s\s*\[\s*pos\s*\]\s*!=\s*0\s*$|^\s*s\s*\[\s*pos\s*\]\s*!=\s*0\s*$\n^\s*s\s*\[\s*pos\s*\]\s*<\s*e\s*$),Q11 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers
12,N/A,N/A,N/A,C,"[""N/A"", ""N/A"", ""N/A""]",.*,Q12 from A Multi-National Study of Reading and Tracing Skills in Novice Programmers